
block RegisterDecoder {
    in[3] reg;
    out is_A;
    out is_B;
    out is_Addr;
    out is_SR;
    out is_PC;

    is_A = ~reg[0] & ~reg[1] & ~reg[2];
    is_B = reg[0] & ~reg[1] & ~reg[2];
    is_Addr = ~reg[0] & reg[1] & ~reg[2];
    is_SR = reg[0] & reg[1] & ~reg[2];
    is_PC = ~reg[0] & ~reg[1] & reg[2];
}

block InstructionDecoder {
    in[16] instruction;
    out[11] immediate_value;
    out operand2_is_immediate;
    out immediate_out;
    out A_in, A_out;
    out B_in, B_out;
    out Addr_in, Addr_out;
    out SR_in, SR_carry_in, SR_zero_in, SR_equal_in, SR_less_than_in, SR_out;
    out PC_in, PC_out;
    out[3] PC_in_cond;
    out alu_out;
    out[3] alu_fn;
    out mem_read, mem_write;

    block RegisterDecoder mov_target, mov_source;

    wire[5] opcode;
    wire is_mov;
    wire is_ld;
    wire is_st;
    wire is_and;
    wire is_or;
    wire is_xor;
    wire is_not;
    wire is_add;
    wire is_sub;
    wire is_sl;
    wire is_sr;
    wire is_cmp;
    wire is_jmp;
    wire is_immediate_variant;
    wire[3] jmp_cond;

    opcode = instruction[16:11];

    // Instruction is only determined by the lower 4 bits
    is_mov = ~opcode[0] & ~opcode[1] & ~opcode[2] & ~opcode[3];
    is_ld = opcode[0] & ~opcode[1] & ~opcode[2] & ~opcode[3];
    is_st = ~opcode[0] & opcode[1] & ~opcode[2] & ~opcode[3];
    is_and = opcode[0] & opcode[1] & ~opcode[2] & ~opcode[3];
    is_or = ~opcode[0] & ~opcode[1] & opcode[2] & ~opcode[3];
    is_xor = opcode[0] & ~opcode[1] & opcode[2] & ~opcode[3];
    is_not = ~opcode[0] & opcode[1] & opcode[2] & ~opcode[3];
    is_add = opcode[0] & opcode[1] & opcode[2] & ~opcode[3];
    is_sub = ~opcode[0] & ~opcode[1] & ~opcode[2] & opcode[3];
    is_sl = opcode[0] & ~opcode[1] & ~opcode[2] & opcode[3];
    is_sr = ~opcode[0] & opcode[1] & ~opcode[2] & opcode[3];
    is_cmp = opcode[0] & opcode[1] & ~opcode[2] & opcode[3];
    is_jmp = ~opcode[0] & ~opcode[1] & opcode[2] & opcode[3];

    is_immediate_variant = opcode[4];

    immediate_value = instruction[11:0];

    // mov
    mov_target.reg = instruction[3:0];
    mov_source.reg = instruction[6:3];

    A_in = mov_target.is_A & is_mov;
    B_in = mov_target.is_B & is_mov;
    Addr_in = mov_target.is_Addr & is_mov;
    SR_in = mov_target.is_SR & is_mov;
    PC_in = mov_target.is_PC & is_mov;

    A_out = mov_source.is_A & is_mov;
    B_out = mov_source.is_B & is_mov;
    Addr_out = mov_source.is_Addr & is_mov;
    SR_out = mov_source.is_SR & is_mov;
    PC_out = mov_source.is_PC & is_mov;

    // ld, ldi
    A_in = 1#1 & is_ld;
    mem_read = 1#1 & (is_ld & ~is_immediate_variant);
    immediate_out = 1#1 & (is_ld & is_immediate_variant);

    // st
    A_out = 1#1 & is_st;
    mem_write = 1#1 & is_st;

    // and, andi
    A_in = 1#1 & is_and;
    SR_zero_in = 1#1 & is_and;
    operand2_is_immediate = 1#1 & (is_and & is_immediate_variant);
    alu_fn = 0#3 & is_and;
    alu_out = 1#1 & is_and;

    // or, ori
    A_in = 1#1 & is_or;
    SR_zero_in = 1#1 & is_or;
    operand2_is_immediate = 1#1 & (is_or & is_immediate_variant);
    alu_fn = 1#3 & is_or;
    alu_out = 1#1 & is_or;

    // xor
    A_in = 1#1 & is_xor;
    operand2_is_immediate = 1#1 & (is_xor & is_immediate_variant);
    SR_zero_in = 1#1 & is_xor;
    alu_fn = 2#3 & is_xor;
    alu_out = 1#1 & is_xor;

    // not
    A_in = 1#1 & is_not;
    SR_zero_in = 1#1 & is_not;
    alu_fn = 3#3 & is_not;
    alu_out = 1#1 & is_not;

    // add, addi
    A_in = 1#1 & is_add;
    SR_carry_in = 1#1 & is_add;
    SR_zero_in = 1#1 & is_add;
    operand2_is_immediate = 1#1 & (is_add & is_immediate_variant);
    alu_fn = 6#3 & is_add;
    alu_out = 1#1 & is_add;

    // sub
    A_in = 1#1 & is_sub;
    SR_carry_in = 1#1 & is_sub;
    SR_zero_in = 1#1 & is_sub;
    alu_fn = 7#3 & is_sub;
    alu_out = 1#1 & is_sub;

    // sl, sli
    A_in = 1#1 & is_sl;
    SR_zero_in = 1#1 & is_sl;
    operand2_is_immediate = 1#1 & (is_sl & is_immediate_variant);
    alu_fn = 4#3 & is_sl;
    alu_out = 1#1 & is_sl;

    // sr, sri
    A_in = 1#1 & is_sr;
    SR_zero_in = 1#1 & is_sr;
    operand2_is_immediate = 1#1 & (is_sr & is_immediate_variant);
    alu_fn = 5#3 & is_sr;
    alu_out = 1#1 & is_sr;

    // cmp, cmpi
    SR_equal_in = 1#1 & is_cmp;
    SR_less_than_in = 1#1 & is_cmp;
    operand2_is_immediate = 1#1 & (is_cmp & is_immediate_variant);
    alu_fn = 7#3 & is_cmp;

    // jmp
    jmp_cond = instruction[3:0];

    PC_in = 1#1 & is_jmp;
    PC_in_cond = jmp_cond & is_jmp;
    Addr_out = 1#1 & is_jmp;
}
