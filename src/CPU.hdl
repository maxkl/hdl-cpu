
include "Register.hdl"
include "StatusRegister.hdl"
include "ProgramCounter.hdl"
include "CycleCounter.hdl"
include "InstructionDecoder.hdl"
include "ALU/ALU.hdl"
include "ConditionChecker.hdl"

block CPU {
    in clk;
    in[16] mem_data_in;
    out[16] mem_data_out;
    out[16] mem_addr;
    out mem_enable, mem_output_enable, mem_write_enable;
    out mem_write_clk;

    block Register A;
    block Register B;
    block Register Addr;
    block Register SP;
    block StatusRegister SR;
    block ProgramCounter PC;
    block Register IR;

    block ALU alu;

    block CycleCounter cycle;

    block InstructionDecoder decoder;

    block ConditionChecker condition;

    wire[16] data_bus;
    wire[16] addr_bus;

    wire[16] extended_immediate_value;

    // Next cycle on falling edge of clk
    cycle.clk = clk;

    A.clk = clk;
    B.clk = clk;
    Addr.clk = clk;
    SP.clk = clk;
    SR.clk = clk;
    PC.clk = clk;
    IR.clk = clk;

    mem_write_clk = clk;

    mem_addr = addr_bus;

    // Fetch stage
    data_bus = mem_data_in & cycle.is_fetch;
    addr_bus = PC.value & cycle.is_fetch;
    mem_enable = 1#1 & cycle.is_fetch;
    mem_output_enable = 1#1 & cycle.is_fetch;
    IR.load = 1#1 & cycle.is_fetch;
    IR.value_in = data_bus;

    decoder.instruction = IR.value;

    // Execute stage
    extended_immediate_value = 0#5 $ decoder.immediate_value;

    data_bus = extended_immediate_value & (decoder.immediate_out & cycle.is_execute);

    data_bus = A.value & (decoder.A_out & cycle.is_execute);
    A.value_in = data_bus;
    A.load = 1#1 & (decoder.A_in & cycle.is_execute);

    data_bus = B.value & (decoder.B_out & cycle.is_execute);
    B.value_in = data_bus;
    B.load = 1#1 & (decoder.B_in & cycle.is_execute);

    data_bus = Addr.value & (decoder.Addr_out & cycle.is_execute);
    addr_bus = Addr.value & cycle.is_execute;
    Addr.value_in = data_bus;
    Addr.load = 1#1 & (decoder.Addr_in & cycle.is_execute);

    data_bus = SP.value & (decoder.SP_out & cycle.is_execute);
    SP.value_in = data_bus;
    SP.load = 1#1 & (decoder.SP_in & cycle.is_execute);

    data_bus = SR.value & (decoder.SR_out & cycle.is_execute);
    SR.value_in = data_bus & decoder.SR_in;
    SR.load = 1#1 & (decoder.SR_in & cycle.is_execute);
    SR.value_in_carry = alu.carry_flag & (decoder.SR_carry_in & cycle.is_execute);
    SR.load_carry = 1#1 & (decoder.SR_carry_in & cycle.is_execute);
    SR.value_in_Z = alu.zero_flag & (decoder.SR_zero_in & cycle.is_execute);
    SR.load_Z = 1#1 & (decoder.SR_zero_in & cycle.is_execute);
    SR.value_in_EQ = alu.equal_flag & (decoder.SR_equal_in & cycle.is_execute);
    SR.load_EQ = 1#1 & (decoder.SR_equal_in & cycle.is_execute);
    SR.value_in_LT = alu.less_than_flag & (decoder.SR_less_than_in & cycle.is_execute);
    SR.load_LT = 1#1 & (decoder.SR_less_than_in & cycle.is_execute);

    data_bus = PC.value & (decoder.PC_out & cycle.is_execute);
    PC.value_in = data_bus;
    condition.condition = decoder.PC_in_cond;
    condition.carry_flag = SR.value_carry;
    condition.zero_flag = SR.value_Z;
    condition.equal_flag = SR.value_EQ;
    condition.less_than_flag = SR.value_LT;
    PC.load = condition.met & (decoder.PC_in & cycle.is_execute);
    // The PC will only increment if PC.load is '0'
    PC.enable_count = 1#1 & cycle.is_execute;

    data_bus = alu.result & (decoder.alu_out & cycle.is_execute);
    alu.operand1 = A.value;
    alu.operand2 = B.value & ~decoder.operand2_is_immediate;
    alu.operand2 = extended_immediate_value & decoder.operand2_is_immediate;
    alu.fn = decoder.alu_fn;

    data_bus = mem_data_in & (decoder.mem_read & cycle.is_execute);
    mem_data_out = data_bus & (decoder.mem_write & cycle.is_execute);
    mem_enable = 1#1 & ((decoder.mem_read | decoder.mem_write) & cycle.is_execute);
    mem_output_enable = 1#1 & (decoder.mem_read & cycle.is_execute);
    mem_write_enable = 1#1 & (decoder.mem_write & cycle.is_execute);
}
